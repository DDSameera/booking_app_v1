name: Prod Deploy (hilton.webbyus.com)
run-name: Booking App - Production

on:
  pull_request:
    branches: [ main ]
    types:
      - closed        # fires when PR is closed (includes merged PRs)
  workflow_dispatch:


concurrency:
  group: booking-app-production
  cancel-in-progress: true

env:
  NODE_VERSION: '22'
  PHP_VERSION: '8.4'
  SERVER_ROOT: "/home/hiltonwebbyus"
  APP_DIR: "/home/hiltonwebbyus/repositories/booking_app_v1"
  TMP: "/home/hiltonwebbyus/release_tmp"
  PUBLIC_HTML: "/home/hiltonwebbyus/public_html"
  DB_BACKUPS: "/home/hiltonwebbyus/dbbackups"
  VITE_APP_URL: "https://hilton.webbyus.com"

jobs:
  build:
    name: Build Artifacts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, mbstring, zip, pdo, sqlite, bcmath, intl, gd
          coverage: none
          tools: composer:v2

      # ✅ Cache Composer
      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-

      - name: Install PHP Dependencies (dev)
        run: composer install --no-interaction --prefer-dist --no-progress

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # ✅ Cache NPM
      - name: Cache NPM
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: npm-

      - name: Prepare test environment
        run: |
          mkdir -p database
          : > database/testing.sqlite

      - name: Install NPM Dependencies & Build
        env:
          CI: true
          VITE_APP_URL: ${{ env.VITE_APP_URL }}
          VITE_LOCALE_ORIGIN: ""
          VITE_I18N_FORMAT: "json"
          VITE_APP_BROADCAST_CONNECTION: "reverb"
          VITE_APP_REVERB_APP_ID: "local"
          VITE_APP_REVERB_APP_KEY: ${{ secrets.REVERB_APP_KEY }}
          VITE_APP_REVERB_HOST: "stg-reservation.tukiteasycolombo.com"
          VITE_APP_REVERB_PORT: "443"
          VITE_APP_REVERB_SCHEME: "https"
          VITE_APP_RECAPTCHAV3_SITEKEY: ${{ secrets.RECAPTCHAV3_SITEKEY }}
        run: |
          npm ci --prefer-offline
          npm run build
          # ✅ Sanity check
          test -f public/build/manifest.json || (echo "❌ Build failed: manifest.json missing" && exit 1)

      - name: Fresh migrate (sqlite)
        env:
          APP_ENV: testing
          DB_CONNECTION: sqlite
          DB_DATABASE: database/testing.sqlite
          TELESCOPE_ENABLED: 'false'
          PULSE_ENABLED: 'false'
          CACHE_STORE: array
          SESSION_DRIVER: array
          QUEUE_CONNECTION: sync
        run: php artisan migrate:fresh --seed --force --no-interaction --database=sqlite

      - name: Prepare .env for tests
        run: cp .env.example .env

      - name: Run tests (verbose list)
        run: ./vendor/bin/pest --configuration phpunit.xml.dist --colors=always --testdox -v

      - name: Prepare deploy folder
        run: |
          rm -rf deploy
          rsync -a \
            --exclude=.git \
            --exclude=.github \
            --exclude=node_modules \
            --exclude=tests \
            --exclude=.env* \
            --exclude=storage/** \
            --exclude=database/testing.sqlite \
            ./ deploy/

      - name: Install PHP Dependencies (prod only in deploy/)
        run: |
          cd deploy
          composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist --no-progress

      # ✅ Ensure built assets go into deploy/public/build
      - name: Move built assets into deploy
        run: |
          mkdir -p deploy/public/build
          rsync -a public/build/ deploy/public/build/

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: booking-app
          path: deploy
          retention-days: 1

  deploy:
    name: Deploy to Production
    environment: PRODUCTION
    runs-on: ubuntu-latest
    needs: build
    if: github.event.pull_request.merged == true && github.ref == 'refs/heads/main'

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: booking-app
          path: booking-app

      - name: Upload build to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "booking-app/*"
          target: "${{ env.TMP }}"

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: APP_DIR,TMP,DB_BACKUPS,PUBLIC_HTML,DEPLOY_SECRET
          script_stop: true
          script: |
            set -euo pipefail

            BACKUP_DIR="${DB_BACKUPS}/$(date +%Y%m%d_%H%M%S)"
            echo "Backing up existing app into: $BACKUP_DIR"
            mkdir -p "$BACKUP_DIR"
            rsync -a --delete "$APP_DIR"/ "$BACKUP_DIR"/ || true

            SRC="$TMP"
            if [ -d "$TMP/booking-app" ]; then
              SRC="$TMP/booking-app"
            fi

            echo "Entering maintenance mode..."
            cd "$APP_DIR"
            php artisan down --secret="${DEPLOY_SECRET:-}" || true

            echo "Deploying new build from $SRC to $APP_DIR ..."
            rsync -a --delete \
              --exclude='.env*' \
              --exclude='storage/**' \
              "$SRC"/ "$APP_DIR"/

            echo "Ensuring storage symlink..."
            php artisan storage:link || true

            echo "Clearing caches..."
            php artisan optimize:clear || true

            echo "Running migrations..."
            php artisan migrate --force --no-interaction

            echo "Re-caching..."
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache || true
            php artisan event:cache || true

            echo "Restarting queues..."
            php artisan queue:restart || true

            echo "Syncing built assets to web root: $PUBLIC_HTML"
            mkdir -p "$PUBLIC_HTML/build"
            rsync -a "$APP_DIR/public/build/" "$PUBLIC_HTML/build/"

            echo "Fixing permissions..."
            chmod -R 775 storage bootstrap/cache || true

            echo "Exiting maintenance mode..."
            php artisan up || true

            echo "Cleaning up temporary artifacts..."
            rm -rf "$TMP"/*

            echo "✅ Deployment completed!"
